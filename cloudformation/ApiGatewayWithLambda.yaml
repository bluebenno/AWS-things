#


AWSTemplateFormatVersion: '2010-09-09'


Description: Janky APIGateway


Resources:
  GreetingLambda: 
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: >
            exports.handler = (event, context, callback) => {
              console.log('Event:', JSON.stringify(event));
              const name = event.name || 'World';
              const response = {greeting: `Hello, ${name}!`};
              callback(null, response);
            };
      Description: A greeting function
      FunctionName: GreetingLambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs4.3


  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns: 
       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -        
            Effect: "Allow"
            Principal:
              Service:
                -  "lambda.amazonaws.com"
            Action:
                -  "sts:AssumeRole"


  LambdaPermission: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt GreetingLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
                   - ''
                   - - 'arn:aws:execute-api:'
                     - !Ref AWS::Region
                     - ':'
                     - !Ref AWS::AccountId
                     - ':'
                     - !Ref GreetingApi
                     - '/*'



  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "ApiGatewayLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"

  GreetingApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: API used for Greetings, ref https://blog.jayway.com/2016/08/17/introduction-to-cloudformation-for-api-gateway/
      FailOnWarnings: true
      Name: Greeting API


  GreetingAPIStage:
    DependsOn: ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          DataTraceEnabled: 'true'
          LoggingLevel: 'INFO'
      RestApiId: !Ref GreetingApi
      StageName: LATEST


  ApiDeployment:
    DependsOn: GreetingRequest
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GreetingApi
      StageName: DummyStage


  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn


  GreetingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GreetingApi
      ParentId: !GetAtt GreetingApi.RootResourceId
      PathPart: greeting


  GreetingRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      MethodResponses:
        - StatusCode: 200
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      RequestParameters: 
        'method.request.querystring.name': false
      ResourceId: !Ref GreetingResource
      RestApiId: !Ref GreetingApi
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri: !Join
               - ''
               - - 'arn:aws:apigateway:'
                 - !Ref AWS::Region
                 - ':lambda:path/2015-03-31/functions/'
                 - !GetAtt GreetingLambda.Arn
                 - '/invocations'
        IntegrationResponses:   
          - StatusCode: "200"
        RequestTemplates:
          'application/json': '{"name": "$input.params(''name'')"}'






Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Join
             - ''
             - - 'https://'
               - !Ref GreetingApi
               - '.execute-api.'
               - !Ref AWS::Region
               - '.amazonaws.com'

