AWSTemplateFormatVersion: '2010-09-09' 

Description:
   Cloudformation Template to launch a cheap ECS Cluster. Ref http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html

Parameters: 

  SSHKey: 
    Type: AWS::EC2::KeyPair::SSHKey 
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.  
    
  VpcId: 
    Type: AWS::EC2::VPC::Id 
    Description: Select a VPC that allows instances access to the Internet.  
    
  WhichTwoSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.

  DesiredCapacity:
    Type: Number
    AllowedValues: ['0','1','2']
    Default: '1'
    Description: Default 1. Number of instances to launch in your ECS cluster (0..2 valid)

  MaxSize:
    Type: Number
    AllowedValues: ['0','1','2']
    Default: '1'
    Description: Default 1. Maximum number of instances that can be launched in your ECS cluster.

  InstanceType:
    Description: Cheap EC2 instance types
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small]
    ConstraintDescription: Please choose a cheap instance type.

  WhiteListSourceIP:
    Description: An IPv4 address that will be permitted full access to everything
    AllowedValues: ['\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b']
    Type: String

  ImageToDeploy:
    Description: Image to deploy into your ECS Cluster
    Type: String
    AllowedValues: ['0.+com/[a-Z]+:[a-Z]']


Mappings:
  AWSRegionToECSoptimisedAMI:
    ap-southeast-2:
      ECSoptimisedAMI: ami-14b55f76


Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECS01

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'

  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Join ['', [!Ref 'WhiteListSourceIP', /32]]

  EcsSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: !Join ['', [!Ref 'WhiteListSourceIP', /32]]

  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'EcsSecurityGroup'

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -ecs-demo-app]]
      Family: console-sample-app-static
      NetworkMode: bridge
      ContainerDefinitions:
      - Name: simple-app
        Cpu: 10
        Environment: 
        - Name: Foo
          Value: Bar
        Essential: true
        Image: 042228332096.dkr.ecr.ap-southeast-2.amazonaws.com/beno01:friendlyhello2
        Memory: 120
        MemoryReservation: 100
        Privileged: false
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
          Protocol: tcp
        

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'WhichTwoSubnets'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: 1
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
        
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [AWSRegionToECSoptimisedAMI, !Ref 'AWS::Region', ECSoptimisedAMI]
      SecurityGroups: [!Ref 'EcsSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      SSHKey: !Ref 'SSHKey'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}


  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: '1'
      TaskDefinition: !Ref 'taskdefinition'


  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: service
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join ['', [service/, !Ref 'ECSCluster', /, !GetAtt [service, Name]]]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents',
              'ecr:BatchCheckLayerAvailability', 'ecr:BatchGetImage', 'ecr:GetDownloadUrlForLayer', 'ecr:GetAuthorizationToken']
            Resource: '*'


  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'


  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

Outputs:
  ecsservice:
    Value: !Ref 'service'
  ecscluster:
    Value: !Ref 'ECSCluster'
  taskdef:
    Value: !Ref 'taskdefinition'
